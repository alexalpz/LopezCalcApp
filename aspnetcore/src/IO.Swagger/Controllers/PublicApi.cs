/*
 * Final Calculator API
 *
 * Calculator API for final
 *
 * OpenAPI spec version: 1.0.0
 * Contact: al08583@georgiasouthern.edu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PublicApiController : ControllerBase
    { 
        /// <summary>
        /// Performs caculations
        /// </summary>
        /// <remarks>Returns the value of two integers</remarks>
        /// <param name="opposite">First value</param>
        /// <param name="adjacent">Second value</param>
        /// <response code="200">Succesful response</response>
        /// <response code="400">bad input parameter</response>
        /// <response code="401">Not authenticated</response>
        /// <response code="403">Access token does not have the required scope</response>
        [HttpGet]
        [Route("/api/finalAPI//calculator.php")]
        [ValidateModelState]
        [SwaggerOperation("CalcID")]
        [SwaggerResponse(statusCode: 200, type: typeof(decimal?), description: "Succesful response")]
        public virtual IActionResult CalcID([FromQuery][Required()]int? opposite, [FromQuery][Required()]int? adjacent)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(decimal?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "0.8008281904610115";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<decimal?>(exampleJson)
                        : default(decimal?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates values in memory
        /// </summary>
        /// <remarks>Stores specified values in memory</remarks>
        /// <param name="value">Value to store</param>
        /// <response code="200">Value was created and stored.</response>
        /// <response code="400">bad input parameter</response>
        /// <response code="401">Not authenticated</response>
        [HttpPost]
        [Route("/api/finalAPI//memory.php")]
        [ValidateModelState]
        [SwaggerOperation("CreateMemory")]
        [SwaggerResponse(statusCode: 200, type: typeof(decimal?), description: "Value was created and stored.")]
        [SwaggerResponse(statusCode: 400, type: typeof(decimal?), description: "bad input parameter")]
        public virtual IActionResult CreateMemory([FromQuery][Required()]int? value)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(decimal?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(decimal?));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "0.8008281904610115";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<decimal?>(exampleJson)
                        : default(decimal?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes memory value
        /// </summary>
        /// <remarks>Clears the memory</remarks>
        /// <response code="200">Memory Deleted</response>
        /// <response code="400">bad input parameter</response>
        /// <response code="401">Not authenticated</response>
        [HttpDelete]
        [Route("/api/finalAPI//memory.php")]
        [ValidateModelState]
        [SwaggerOperation("DeleteMemory")]
        public virtual IActionResult DeleteMemory()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves memory value
        /// </summary>
        /// <remarks>Return value stored in memory</remarks>
        /// <response code="200">Memory value returned</response>
        /// <response code="401">Not authenticated</response>
        [HttpGet]
        [Route("/api/finalAPI//memory.php")]
        [ValidateModelState]
        [SwaggerOperation("MemoryID")]
        [SwaggerResponse(statusCode: 200, type: typeof(decimal?), description: "Memory value returned")]
        public virtual IActionResult MemoryID()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(decimal?));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "0.8008281904610115";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<decimal?>(exampleJson)
                        : default(decimal?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates specified value
        /// </summary>
        /// <remarks>Updates values in memory</remarks>
        /// <param name="value">Value to update in memory</param>
        /// <response code="200">Memory has been updated</response>
        /// <response code="400">bad input parameter</response>
        /// <response code="401">Not authenticated</response>
        [HttpPut]
        [Route("/api/finalAPI//memory.php")]
        [ValidateModelState]
        [SwaggerOperation("UpdateMemory")]
        [SwaggerResponse(statusCode: 200, type: typeof(decimal?), description: "Memory has been updated")]
        public virtual IActionResult UpdateMemory([FromQuery][Required()]int? value)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(decimal?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "0.8008281904610115";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<decimal?>(exampleJson)
                        : default(decimal?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
